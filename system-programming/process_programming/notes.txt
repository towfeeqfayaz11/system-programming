## process creation using fork()
# overview of frok()
# parent and child process
# wait in parent process
# exit() in child process

# fork() systemcall is used to create a child process which is almost exact duplicate
  of parent at the time of creation

> #include <unistd.h>
  pid_t fork(void);

  > in parent process, returns the pid of the child process on successful creation
    or returns -1 in case of failure
  > in child process, returns 0 to indicate it is child process

# upon creation, the two processes are executing the same program text, but they have
  seperate copies of the stack, data and heap segments

# the child's stack, data and heap segments are initially exact duplicates of the corresponding
  parts of the parent's memory.
# after the fork, each process can modify the variables in its stack, data and heap segments
  without affecting the other process


NOTE: there is a concept called COW (copy on write),
      In most of modern linux systems. when a fork system is created, there will be a child and parent process,
      but both these processes will point to the same virtual memory rather than having its own virtual memory,
      but when any process tries to change the value of variables stored in virtual memory, then a new page frame of that
      page will be created, this is called copy on the write.
      
      This is used to avoid the unnecessary copying of the complete virtual memory from parent to child process.
      This copy on wirte is added as a node for some extra information 


# wait()
  - used to synchronise parent and child process and get exit status of child process
  - each process has an entry in the process table. Whena process ends, all of the memory is deallocated (but 
    an entry of exited process is still maintained in the process table). The parent can read the child's status
    by executing the wait() system called
  - the parent process receives signal SIGCHLD when child process dies
  - wait() systemcall also gives information on how the child process exited

  #inclde <sys/wait.h>
  pid_t wait(int *status); // waits for child process

  #inclde <sys/wait.h>
  pid_t waitpid(pid_t pid, int *status, int options); //similiar to wait, but we can give pid of any process to wait for

   

# exit()
  - to terminate the process